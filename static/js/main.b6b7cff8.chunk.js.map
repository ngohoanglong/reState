{"version":3,"sources":["modules/navigation/location.js","modules/navigation/useLocation.Subscriber.js","views/Github/Github.lazy.js","views/Covid/Covid.lazy.js","views/Home/Home.lazy.js","views/Portfolio/Portfolio.lazy.js","views/PeriodicTable/PeriodicTable.lazy.js","App.js","serviceWorker.js","index.js","modules/cache/useCache.js","modules/navigation/namespace.js","modules/navigation/useLocation.js","modules/namespace/NamespaceContext.js","modules/namespace/useNamespace.js"],"names":["window","useLocationSubscriber","useCache","namespace","location","applocation","pathname","localtion","setLocation","useEffect","handleUpdateLocation","addEventListener","removeEventListener","LocationSubscriber","LazyGithub","lazy","Github","props","fallback","LazyCovid","Covid","LazyHome","Home","LazyPortfolio","Portfolio","LazyPeriodicTable","PeriodicTable","Switch","children","useLocation","element","find","child","includes","path","console","log","app","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","e","data","rootElement","document","getElementById","ReactDOM","render","StrictMode","process","URL","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","CacheContext","React","createContext","ListennerContext","UpdateCachesContext","CacheProvider","initialVale","uIdRef","useRef","listennersRef","cachesRef","useState","update","setUpdate","handleListenner","useCallback","cb","current","handleUpdate","key","value","Date","now","Object","values","map","caches","Provider","useCacheSet","Consumer","useContext","initialValue","setValue","listenner","updateCaches","unLisenner","root","NamespaceContext","NamespaceProvider","useNamespace"],"mappings":"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","file":"static/js/main.b6b7cff8.chunk.js","sourcesContent":["export default window.location","import React, { useEffect } from \"react\";\r\nimport useCache from \"../cache/useCache\";\r\nimport namespace from \"./namespace\";\r\nimport applocation from \"./location\";\r\n\r\nconst useLocationSubscriber = () => {\r\n  const [localtion, setLocation] = useCache(namespace.location,applocation.pathname);\r\n\r\n  useEffect(() => {\r\n    function handleUpdateLocation   (){\r\n        const {\r\n            pathname\r\n          } = applocation;\r\n          setLocation(pathname); \r\n    }\r\n    handleUpdateLocation()\r\n    window.addEventListener(\"popstate\", handleUpdateLocation, false);\r\n    return ()=>{\r\n        window.removeEventListener(\"popstate\", handleUpdateLocation, false);\r\n    }\r\n  }, []);\r\n  return localtion;\r\n};\r\nexport const LocationSubscriber = () => {\r\n  useLocationSubscriber();\r\n  return null;\r\n};\r\nexport default useLocationSubscriber;\r\n","import React, { lazy, Suspense } from 'react';\r\n\r\nconst LazyGithub = lazy(() => import('./Github'));\r\n\r\nconst Github = props => (\r\n  <Suspense fallback={null}>\r\n    <LazyGithub {...props} />\r\n  </Suspense>\r\n);\r\n\r\nexport default Github;\r\n","import React, { lazy, Suspense } from 'react';\r\n\r\nconst LazyCovid = lazy(() => import('./Covid'));\r\n\r\nconst Covid = props => (\r\n  <Suspense fallback={null}>\r\n    <LazyCovid {...props} />\r\n  </Suspense>\r\n);\r\n\r\nexport default Covid;\r\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyHome = lazy(() => import('./Home'));\n\nconst Home = props => (\n  <Suspense fallback={null}>\n    <LazyHome {...props} />\n  </Suspense>\n);\n\nexport default Home;\n","import React, { lazy, Suspense } from \"react\";\n\nconst LazyPortfolio = lazy(() => import(\"./Portfolio\"));\n\nconst Portfolio = (props) => (\n  <Suspense fallback={null}>\n    <LazyPortfolio {...props} />\n  </Suspense>\n);\n\nexport default Portfolio;\n","import React, { lazy, Suspense } from \"react\";\n\nconst LazyPeriodicTable = lazy(() => import(\"./PeriodicTable\"));\n\nconst PeriodicTable = (props) => (\n  <Suspense fallback={null}>\n    <LazyPeriodicTable {...props} />\n  </Suspense>\n);\n\nexport default PeriodicTable;\n","import React, {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  cloneElement,\n} from \"react\";\n\nimport useNamespace from \"./modules/namespace/useNamespace\";\nimport useCache, { CacheProvider, useCacheSet } from \"./modules/cache/useCache\";\nimport PullToRefresh from \"rmc-pull-to-refresh\";\nimport useLocationSubscriber, {\n  LocationSubscriber,\n} from \"./modules/navigation/useLocation.Subscriber\";\nimport useLocation from \"./modules/navigation/useLocation\";\nimport Github from \"./views/Github/Github.lazy\";\nimport Covid from \"./views/Covid/Covid.lazy\";\nimport Home from \"./views/Home/Home.lazy\";\nimport Portfolio from \"./views/Portfolio/Portfolio.lazy\";\nimport PeriodicTable from \"./views/PeriodicTable/PeriodicTable.lazy\";\n\nconst Switch = ({ children }) => {\n  const [location] = useLocation();\n  const element = children.find((child) => {\n    return location && location.includes(child.props.path);\n  });\n  console.log(location, element);\n  if (!element) return null;\n  return element;\n};\nconst app = (\n  <>\n    <LocationSubscriber />\n    <Switch>\n      <Covid path=\"/covid\" />\n      <Github path=\"/github\" />\n      <PeriodicTable path=\"/periodic-table\" />\n      <Portfolio path=\"/portfolio\" />\n\n      {/* default */}\n      <Home path=\"/\" />\n    </Switch>\n  </>\n);\nexport default function App() {\n  return <CacheProvider>{app}</CacheProvider>;\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname ===\r\n    'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname ===\r\n      '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\nnavigator.serviceWorker &&\r\n  navigator.serviceWorker.addEventListener(\r\n    'message',\r\n    function(e) {\r\n      console.log(e.data)\r\n    }\r\n  )\r\nexport function register(config) {\r\n  console.log(process.env.NODE_ENV);\r\n  if (\r\n    process.env.NODE_ENV ===\r\n      'production' &&\r\n    'serviceWorker' in navigator\r\n  ) {\r\n    console.log('start service-worker -> register')\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (\r\n      publicUrl.origin !==\r\n      window.location.origin\r\n    ) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\r\n      'load',\r\n      () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(\r\n            swUrl,\r\n            config\r\n          )\r\n\r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(\r\n            serviceWorkerRegistration => {\r\n              console.log(\r\n                'This web app is being served cache-first by a service ' +\r\n                  'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n              )\r\n            }\r\n          )\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          console.log('start service-worker -> register:registerValidSW')\r\n          registerValidSW(swUrl, config)\r\n\r\n          // fortest\r\n          navigator.serviceWorker.ready.then(\r\n            serviceWorkerRegistration => {\r\n              console.log(\r\n                'This web app is being served cache-first by a service ' +\r\n                  'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n              )\r\n              // serviceWorkerRegistration.pushManager\r\n              //   .subscribe({\r\n              //     userVisibleOnly: true\r\n              //   })\r\n              //   .then(function(\r\n              //     subscription\r\n              //   ) {\r\n              //     console.log(\r\n              //       'Subscription successfull'\r\n              //     )\r\n              //     console.log(\r\n              //       subscription\r\n              //     )\r\n              //   })\r\n              //   .catch(function(error) {\r\n              //     console.error(\r\n              //       'Subscription error ' +\r\n              //         error.toString()\r\n              //     )\r\n              //   })\r\n            }\r\n          )\r\n        }\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\nfunction registerValidSW(\r\n  swUrl,\r\n  config\r\n) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker =\r\n          registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (\r\n            installingWorker.state ===\r\n            'installed'\r\n          ) {\r\n\r\n            if (\r\n              navigator.serviceWorker\r\n                .controller\r\n            ) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (\r\n                config &&\r\n                config.onUpdate\r\n              ) {\r\n                config.onUpdate(\r\n                  registration\r\n                )\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\r\n                'Content is cached for offline use.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (\r\n                config &&\r\n                config.onSuccess\r\n              ) {\r\n                config.onSuccess(\r\n                  registration\r\n                )\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error(\r\n        'Error during service worker registration:',\r\n        error\r\n      )\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(\r\n  swUrl,\r\n  config\r\n) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\r\n        'content-type'\r\n      )\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null &&\r\n          contentType.indexOf(\r\n            'javascript'\r\n          ) === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(\r\n          registration => {\r\n            registration\r\n              .unregister()\r\n              .then(() => {\r\n                window.location.reload()\r\n              })\r\n          }\r\n        )\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(\r\n      registration => {\r\n        registration.unregister()\r\n      }\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n\r\nif (\r\n  !process.env.NODE_ENV ||\r\n  process.env.NODE_ENV === 'development'\r\n) {\r\n  serviceWorker.unregister()\r\n  // dev code\r\n} else {\r\n  // production code\r\n  serviceWorker.register()\r\n}","import { useState, useEffect, useContext, useRef, useCallback } from \"react\";\r\nimport React from \"react\";\r\nconst CacheContext = React.createContext({});\r\nconst ListennerContext = React.createContext({});\r\nconst UpdateCachesContext = React.createContext(() => {\r\n  console.error(\"not set func!\");\r\n});\r\nexport const CacheProvider = ({ initialVale = {}, children }) => {\r\n  const uIdRef = useRef(0);\r\n  const listennersRef = useRef({});\r\n  const cachesRef = useRef(initialVale);\r\n  const [update, setUpdate] = useState(initialVale);\r\n  const handleListenner = useCallback(cb => {\r\n    uIdRef.current = uIdRef.current + 1;\r\n    listennersRef.current[uIdRef.current] = cb;\r\n    cb(cachesRef.current);\r\n    return () => delete listennersRef.current[uIdRef.current];\r\n  }, []);\r\n  const handleUpdate = useCallback((key, value) => {\r\n    cachesRef.current[key] = value;\r\n    setUpdate(Date.now());\r\n  }, []);\r\n  useEffect(() => {\r\n    Object.values(listennersRef.current).map(cb => cb(cachesRef.current));\r\n  }, [update]);\r\n  console.log({ update, caches: cachesRef.current });\r\n  return (\r\n    <CacheContext.Provider value={cachesRef.current}>\r\n      <ListennerContext.Provider value={handleListenner}>\r\n        <UpdateCachesContext.Provider value={handleUpdate}>\r\n          {children}\r\n        </UpdateCachesContext.Provider>\r\n      </ListennerContext.Provider>\r\n    </CacheContext.Provider>\r\n  );\r\n};\r\nexport const CacheConsumer = CacheContext.Consumer;\r\n// const caches = {};\r\nconst useCache = (key = \"\", initialValue) => {\r\n  const caches = useContext(CacheContext);\r\n  const [value, setValue] = useState(caches[key] || initialValue);\r\n  const listenner = useContext(ListennerContext);\r\n  const updateCaches = useContext(UpdateCachesContext);\r\n  useEffect(() => {\r\n    const cb = caches => setValue(caches[key]);\r\n    const unLisenner = listenner(cb);\r\n    return () => {\r\n      unLisenner();\r\n    };\r\n  }, [setValue, key, listenner]);\r\n  return [value|| initialValue, value => updateCaches(key, value)];\r\n};\r\nexport const useCacheSet = key => {\r\n  const handleUpdate = useContext(UpdateCachesContext);\r\n  return React.useCallback(value => handleUpdate(key, value), [\r\n    key,\r\n    handleUpdate\r\n  ]);\r\n};\r\nexport default useCache;\r\n","export default {\r\n    root:'navigation',\r\n    location:'navigation.location'\r\n}","import React, { useEffect } from 'react'\r\nimport useCache from '../cache/useCache'\r\nimport namespace from './namespace'\r\nconst useLocation = ()=>{\r\n    return useCache(namespace.location)\r\n}\r\nexport default useLocation","import React from \"react\";\r\nconst NamespaceContext = React.createContext(\"\");\r\nexport const NamespaceProvider = NamespaceContext.Provider;\r\nexport const NamespaceConsumer = NamespaceContext.Consumer;\r\nexport default NamespaceContext;\r\n","import { useContext } from \"react\";\r\nimport NamespaceContext from \"./NamespaceContext\";\r\n\r\nconst useNamespace = (namespace = \"\") => {\r\n  return useContext(NamespaceContext) + \"/\" + namespace;\r\n};\r\nexport default useNamespace;\r\n"],"sourceRoot":""}